__author__ = 'Moveton'
import time
import math

"""
    The sequence of triangle numbers is generated by adding the natural numbers.
    So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
        1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
    Let us list the factors of the first seven triangle numbers:
        1: 1
        3: 1,3
        6: 1,2,3,6
        10: 1,2,5,10
        15: 1,3,5,15
        21: 1,3,7,21
        28: 1,2,4,7,14,28
    We can see that 28 is the first triangle number to have over five divisors.
    What is the value of the first triangle number to have over five hundred divisors?

    NOTES: This solution (which is one of the most elegant, imho) was found in the internet and upgraded a little bit.
"""


start_time = time.time()

def euler12():
    one = True
    tri = 1
    num = 2

    while one:
        # iterate through the integers ands respective triangular numbers
        tri = tri + num
        num += 1
        l = []
        sqrt_tri = int(math.sqrt(tri)) + 1

        # add divisors to the list
        for i in range(1, sqrt_tri):
            if tri % i == 0:
                l.append(i)
                if i < math.sqrt(tri):
                    l.append(tri // i)
                if len(l) > 5:
                    one = False

    print('integer ' + str(tri) + ' is a ' + str(num - 1) + ' triangular and has ' + str(len(l)) + ' divisors')

if __name__ == '__main__':
    euler12()

print('It took ' + str(time.time() - start_time) + " seconds")



